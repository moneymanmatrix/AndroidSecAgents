import { supabase } from "../supabase"

export type Vulnerability = {
  id: number
  source_url: string
  title: string
  description?: string
  date_found: string
  status: "New" | "Analyzed" | "Resolved"
  severity?: string
}

export async function getVulnerabilities() {
  const { data, error } = await supabase.from("vulnerabilities").select("*").order("date_found", { ascending: false })

  if (error) {
    console.error("Error fetching vulnerabilities:", error)
    return []
  }

  return data as Vulnerability[]
}

export async function addVulnerability(vulnerability: Omit<Vulnerability, "id">) {
  const { data, error } = await supabase.from("vulnerabilities").insert([vulnerability]).select()

  if (error) {
    console.error("Error adding vulnerability:", error)
    return null
  }

  return data[0] as Vulnerability
}

export async function updateVulnerabilityStatus(id: number, status: Vulnerability["status"]) {
  const { error } = await supabase
    .from("vulnerabilities")
    .update({
      status,
      updated_at: new Date().toISOString(),
    })
    .eq("id", id)

  if (error) {
    console.error("Error updating vulnerability status:", error)
    return false
  }

  return true
}
